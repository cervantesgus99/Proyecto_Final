/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/22cc6a88-26eb-4136-a1d2-08b1bf23d3e5 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String message;
  bool acceso;
  bool desactivar;
  bool incendio;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Keypad.h>
#include <Servo.h>

/*const int digitalPin = 4;//sensor flama
const int analogPin = 34; 
const int pinBuzzer = 23;
int pinBotonOn = 13;
const int ledPin = 0;

bool boton1 = LOW;

int digitalVal;
int analogVal; 

*/

//NUEVO ILUMINACION

int led1=33;  //izquierda 
int button1 =25;
int led2=27;
int button2 =15;
int led3=12;
int button3 = 16;
int led4=26; //derecha  
int button4 =14; 
int led5=36;
int button5 =32;
int LDR = 39;
int PIR =13;

//NUEVO
const int pinBuzzer = 2; //buzzer
 
 //FLAMA
 const int ledPin = 0;
const int digitalPin = 4;
const int analogPin = 34;

int digitalVal;
int analogVal; 

//GAS
#define MQ2pin (35) 
float sensorValue; //variable para guardar e


// TECLADO
Servo servo10;
const byte ROWS = 4; 
const byte COLS = 4; 
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};

byte rowPins[ROWS] = {17, 5, 18, 19}; 
byte colPins[COLS] = {21, 03, 01, 22}; 

Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );

char password[7];
char realpassword[7]= "123456";
byte inde = 0;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  //pinMode(12,OUTPUT);
  //pinMode(13,OUTPUT);
  servo10.attach(23);

   Serial.begin(9600);
  
 /* pinMode(ledPin, OUTPUT);
  pinMode(digitalPin, INPUT);
  
  Serial.println(F("Flame Sensor Initialized"));
    pinMode(pinBotonOn,INPUT);
     
  */
  
   //NUEVO
pinMode(ledPin, OUTPUT);
  pinMode(digitalPin, INPUT);
  
  Serial.println(F("Flame Sensor Initialized"));
  
  //GAS
  Serial.begin(9600); // Inicializamos el puerto serial a 9600
  Serial.println("El sensor de gas se esta calentando!");
  delay(2000); // Espera a que el sensor se caliente durante 20 segundos
  
  
  //NUEVO ILUMINACION
   
pinMode(led1, OUTPUT);
pinMode(button1, INPUT);
pinMode(led2, OUTPUT);
pinMode(button2, INPUT);
pinMode(led3, OUTPUT);
pinMode(button3, INPUT);
pinMode(led4, OUTPUT);
pinMode(button4, INPUT);
pinMode(led5, OUTPUT);
pinMode(button5, INPUT);
pinMode(LDR, INPUT);
pinMode(PIR, INPUT);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  //GAS
 /*sensorValue = analogRead(MQ2pin); // read analog input pin 0
  Serial.print("Valor detectado por el sensor: ");
  Serial.print(sensorValue);
  

  if(sensorValue >= 6780)
  {
   Serial.print(" | Se detectó humo!");
   message=" | Se detectó humo!";
  }
  Serial.println("");
  delay(2000);*/
  
  
  //FLAMA 
  /*digitalVal = digitalRead(digitalPin);
  if (digitalVal == HIGH){
    digitalWrite(digitalPin, HIGH);
    Serial.println(F("    -> Flame detected"));
     message=" FLAMA!";
  }*/
  
  //SERVO
  
  /*servo10.write(90);
        delay(1000); // Wait for 2000 millisecond(s)
        
        
        servo10.write(180);
        delay(3000); // Wait for 2000 millisecond(s)
        
        
        servo10.write(90);*/
  
  Acceso_Puerta();
  onDesactivarChange();
  botones_luces();
  movimiento();
  LUZ();
  
 
  
}

void Acceso_Puerta(){

  
  delay(300);

  //TECLADO
  char key = keypad.getKey();
  
   

  if (key != NO_KEY){
    
    Serial.println(key);
    message=(key);
    password[inde]= key;
    inde++;
  }
  if (inde==6){
   
    byte check =0;
      for(int i=0;i<6;i++){
        Serial.print(password[i]);
           message=(password[i]);
        if (password[i]==realpassword[i]){
          check++;
        }
      }   
    
      if (check== 6) {
       // digitalWrite(12, HIGH);
        //digitalWrite(13, LOW);
          servo10.attach(23);

        servo10.write(90);
        delay(1000); // Wait for 2000 millisecond(s)
        servo10.write(180);
        delay(3000); // Wait for 2000 millisecond(s)
        servo10.write(90);
        
        Serial.println("PERMISO AUTORIZADO");
        message=("PERMISO AUTORIZADO");
        acceso=true;
        
      }else{
        digitalWrite(13, HIGH);
        digitalWrite(12, LOW);
        Serial.println("DENEGADO");
        message=("DENEGADO");
        acceso=false;
        
         //generar tono de 440Hz durante 1000 ms
        tone(pinBuzzer, 440);
        delay(1000);
      
        //detener tono durante 500ms  
        noTone(pinBuzzer);
        delay(200);
      
        //generar tono de 523Hz durante 500ms, y detenerlo durante 500ms.
        tone(pinBuzzer, 523, 300);
        delay(200);

     
            }
            inde=0;
  }
  
}



void readFlameSensor(){
  
    // Read the digital interface
  /*digitalVal = digitalRead(digitalPin);
  if (digitalVal == HIGH){
    digitalWrite(ledPin, HIGH);
    Serial.println(F("    -> Flame detected"));
    message=(F("    -> Flame detected"));
    incendio=true;
    acceso=true;
     servo10.write(90);
        delay(1000); // Wait for 2000 millisecond(s)
        servo10.write(180);
        delay(10000); // Wait for 2000 millisecond(s)
        servo10.write(90);
    
  tone(pinBuzzer, 440);
  delay(1000);

  
  noTone(pinBuzzer);
  delay(500);


  tone(pinBuzzer, 523, 300);
  delay(500);
  
  
   
  }else{
    digitalWrite(ledPin, LOW); 
     incendio=false;
    
  }

  // Read the analog interface
  analogVal = analogRead(analogPin);

     */
}











/*
  Since Message is READ_WRITE variable, onMessageChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMessageChange()  {
  // Add your code here to act upon Message change
}


/*
  Since Desactivar is READ_WRITE variable, onDesactivarChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDesactivarChange()  {
  // Add your code here to act upon Desactivar change
  if(desactivar==true){
    //digitalWrite(digitalPin,HIGH);
    //digitalWrite(analogPin,HIGH);
    //digitalWrite(pinBuzzer,HIGH);
  digitalVal = digitalRead(digitalPin);
  if (digitalVal == HIGH){
    digitalWrite(digitalPin, HIGH);
    Serial.println(F("    -> Flame detected"));
     message=" FLAMA!";
    
    digitalWrite (led1,HIGH);
      delay(500);
      
    digitalWrite (led1,LOW);
       delay(500);
     
    digitalWrite (led2,HIGH);
        delay(500);
    digitalWrite (led2,LOW);
       delay(500);
      
    digitalWrite (led3,HIGH);
        delay(500);
    digitalWrite (led3,LOW);
        delay(500);
    
        /*servo10.write(90);
        delay(1000); // Wait for 2000 millisecond(s)
        servo10.write(180);*/
         servo10.attach(23);
        servo10.write(90);
        delay(1000); // Wait for 2000 millisecond(s)
        
        
        servo10.write(180);
        delay(3000); // Wait for 2000 millisecond(s)
        
        
      
        
    //BUZZER
  tone(pinBuzzer, 440);
   digitalWrite(pinBuzzer, HIGH);
   
   
  
   // delay(5000);
  //if(desactivar==false){
    //messenger="SISTEMA APAGADO";
    //digitalWrite(pinBuzzer, LOW); 
    //noTone(pinBuzzer);
  }//else{
   //analogVal = analogRead(analogPin);
  //Serial.print(F("Sensor Value"));Serial.println(analogVal);
  
  //GAS
  sensorValue = analogRead(MQ2pin); // read analog input pin 0
  Serial.print("Valor detectado por el sensor: ");
  Serial.print(sensorValue);
  
  if(sensorValue >= 900)
  {
   Serial.print(" | Se detectó humo!");
   message=" | Se detectó humo!";
   
   digitalWrite (led3,HIGH);
      delay(500);
      
    digitalWrite (led3,LOW);
       delay(500);
      
    digitalWrite (led2,HIGH);
        delay(500);
    digitalWrite (led2,LOW);
       delay(500);
       
    digitalWrite (led1,HIGH);
        delay(500);
    digitalWrite (led1,LOW);
        delay(500);
   
   //BUZZER
   tone(pinBuzzer, 440);
   digitalWrite(pinBuzzer, HIGH);
   
   servo10.write(90);
        delay(1000); // Wait for 2000 millisecond(s)
        
        
        servo10.write(180);
        delay(3000); // Wait for 2000 millisecond(s)
        
        
       
   
   /*servo10.write(90);
        delay(1000); // Wait for 2000 millisecond(s)
        servo10.write(180);
        Serial.println("PUERTA ABIERTA");
        message="PUERTA ABIERTA";
        delay(3000); // Wait for 2000 millisecond(s)*/
  
   
  }
  Serial.println("");
  delay(2000); // espera por 2 segundos para la siguiente lectura
  

  }  //delay(100000000000000);
  //}
  
  
 // if(desactivar==false){
   //   digitalWrite(pinBuzzer, LOW); 
  //}
 // else{
  //delay(100000000000000);
  //}
  
  //}

  // Read the analog interface
 
else{
 // message="SISTEMA APAGADO";
        servo10.attach(23);
        servo10.write(90);
        //Serial.println("PUERTA CERRADA");
           
  digitalWrite(pinBuzzer, LOW); 
  noTone(pinBuzzer);
  
  
}
 
}

void botones_luces(){
 
    // put your main code here, to run repeatedly:
  bool e = digitalRead (button1);
  bool f = digitalRead (button2);
   bool g = digitalRead (button3);
  bool h = digitalRead (button4);
    bool i = digitalRead (button5);
  if(e==1){
    digitalWrite (led1,HIGH);
    digitalWrite (led2,HIGH);
    digitalWrite (led3,HIGH);
  }
  
   if(f==1){
    digitalWrite (led1,HIGH);
    digitalWrite (led2,LOW);
    digitalWrite (led3,HIGH);
  }
  
   if(g==1){
     digitalWrite (led1,LOW);
     digitalWrite (led2,LOW);
    digitalWrite (led3,HIGH);
  }
  
   if(h==1){
    digitalWrite (led1,LOW);
    digitalWrite (led2,HIGH);
    digitalWrite (led3,LOW);
  }
  
     if(i==1){
    digitalWrite (led1,LOW);
    digitalWrite (led2,LOW);
    digitalWrite (led3,LOW);
     digitalWrite (led4,LOW);
  }
      
}

void movimiento(){
  
  int movimiento= digitalRead(PIR);
  //Serial.println(movimiento);
  if (movimiento == HIGH)
  {
    digitalWrite (led4, HIGH);
    message="MOVIMIENTO DETECTADO";
    delay (5000);
     digitalWrite (led4, LOW);
  }
  else
  {
     digitalWrite (led4, LOW); 
     
  }
 
}

void LUZ(){
  /*
  int led5=36;
  int LDR = 39;
  
  int value =digitalRead(LDR);
 Serial.println(value);
  if (value==HIGH)
  {
    digitalWrite(led5 , LOW);
    delay (50);
  }
  else
  {
    digitalWrite(led5 , HIGH);
    
  }
  */
}
