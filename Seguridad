/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/b696f2ce-1c8d-4658-a45e-0ad745f3cca3 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String message;
  bool desactivar;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Servo.h>
#include <SPI.h>      
#include <MFRC522.h>     
Servo servo10;

const int RST_PIN  = 5;   
const int SS_PIN = 21;    
MFRC522 mfrc522(SS_PIN, RST_PIN); 

byte LecturaUID[4];      
byte Usuario1[4]= {0x43, 0xAE, 0x7C, 0xA9} ;    
byte Usuario2[4]= {0x2A, 0x31, 0x0E, 0xB1} ;   

//NUEVO
const int pinBuzzer = 4; //buzzer
 
 //FLAMA
 const int ledPin = 0;
const int digitalPin = 5;
const int analogPin = 34;

int digitalVal;
int analogVal; 

//GAS
#define MQ2pin (35) 
float sensorValue; //variable para guardar el valor analógico del sensor
 
 

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  
  delay(1500); 
    Serial.begin(9600);     // inicializa comunicacion por monitor serie a 9600 bps
  SPI.begin();        // inicializa bus SPI
  mfrc522.PCD_Init();     // inicializa modulo lector
  servo10.attach(22);
  
  Serial.println("INGRESE LA TARJETA");    // Muestra texto Listo
  

//NUEVO
pinMode(ledPin, OUTPUT);
  pinMode(digitalPin, INPUT);
  
  Serial.println(F("Flame Sensor Initialized"));
  
  //GAS
  Serial.begin(9600); // Inicializamos el puerto serial a 9600
  Serial.println("El sensor de gas se esta calentando!");
  delay(2000); // Espera a que el sensor se caliente durante 20 segundos



  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  
  ArduinoCloud.update();
  tarjeta();
   onDesactivarChange();
  // Your code here 
   
                  
  
}



/*
  Since Message is READ_WRITE variable, onMessageChange() is
  executed every time a new value is received from IoT Cloud.
  
*/
void tarjeta(){
  
  message=("INGRESE LA TARJETA");  
   
   const int RST_PIN  = 5;   
const int SS_PIN = 21;    
MFRC522 mfrc522(SS_PIN, RST_PIN); 
  
   if ( ! mfrc522.PICC_IsNewCardPresent())   // si no hay una tarjeta presente
    return;           // retorna al loop esperando por una tarjeta
  
  if ( ! mfrc522.PICC_ReadCardSerial())     // si no puede obtener datos de la tarjeta
    return;           // retorna al loop esperando por otra tarjeta
    
   //Serial.print("UID:");       // muestra texto UID:
    for (byte i = 0; i < mfrc522.uid.size; i++) { // bucle recorre de a un byte por vez el UID
      if (mfrc522.uid.uidByte[i] < 0x10){   // si el byte leido es menor a 0x10
        //Serial.print(" 0");       // imprime espacio en blanco y numero cero
        }
        else{           // sino
          Serial.print(" ");        // imprime un espacio en blanco
          message=(" ");
          }
          //Serial.print(mfrc522.uid.uidByte[i], HEX);    // imprime el byte del UID leido en hexadecimal
          LecturaUID[i]=mfrc522.uid.uidByte[i];     // almacena en array el byte del UID leido      
          }
          
          Serial.print("\t");         // imprime un espacio de tabulacion 
           message=("\t");    
                    
          if(comparaUID(LecturaUID, Usuario1)){    // llama a funcion comparaUID con Usuario1
            Serial.println("Bienvenido Usuario 1"); // si retorna verdadero muestra texto bienvenida
              message=("Bienvenido Usuario 1");
servo10.write(90);
        delay(1000); // Wait for 2000 millisecond(s)
        servo10.attach(22);
        servo10.write(180);
        Serial.println("PUERTA ABIERTA");
        
        delay(3000); // Wait for 2000 millisecond(s)
        servo10.write(90);
        Serial.println("PUERTA CERRADA");
       
}
            
          else if(comparaUID(LecturaUID, Usuario2)){ // llama a funcion comparaUID con Usuario2
            Serial.println("Bienvenido Usuario 2"); // si retorna verdadero muestra texto bienvenida
            message=("Bienvenido Usuario 2");
            servo10.attach(22);
            servo10.write(90);
        delay(1000); // Wait for 2000 millisecond(s)
        servo10.write(180);
        Serial.println("PUERTA ABIERTA");
        
        delay(3000); // Wait for 2000 millisecond(s)
        servo10.write(90);
        Serial.println("PUERTA CERRADA");
            
          }
           else           // si retorna falso
            Serial.println("ACCESO DENEGADO");    // muestra texto equivalente a acceso denegado      
            message=("ACCESO"); 
                  
                  mfrc522.PICC_HaltA();     // detiene comunicacion con tarjeta     
}

void onMessageChange()  {
  // Add your code here to act upon Message change
}

boolean comparaUID(byte lectura[],byte usuario[]) // funcion comparaUID
{
  for (byte i=0; i < mfrc522.uid.size; i++){    // bucle recorre de a un byte por vez el UID
  if(lectura[i] != usuario[i])        // si byte de UID leido es distinto a usuario
    return(false);          // retorna falso
  }
  return(true);           // si los 4 bytes coinciden retorna verdadero
}

/*
  Since Desactivar is READ_WRITE variable, onDesactivarChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDesactivarChange()  {
  // Add your code here to act upon Desactivar change
  if(desactivar==true){
    //digitalWrite(digitalPin,HIGH);
    //digitalWrite(analogPin,HIGH);
    //digitalWrite(pinBuzzer,HIGH);
  digitalVal = digitalRead(digitalPin);
  if (digitalVal == HIGH){
    digitalWrite(digitalPin, HIGH);
    Serial.println(F("    -> Flame detected"));
    servo10.attach(22);
        servo10.write(90);
        delay(1000); // Wait for 2000 millisecond(s)
        servo10.write(180);
        delay(3000);
    //BUZZER
  tone(pinBuzzer, 440);
   digitalWrite(pinBuzzer, HIGH);
   
   
  
   // delay(5000);
  //if(desactivar==false){
    //messenger="SISTEMA APAGADO";
    //digitalWrite(pinBuzzer, LOW); 
    //noTone(pinBuzzer);
  }//else{
   //analogVal = analogRead(analogPin);
  //Serial.print(F("Sensor Value"));Serial.println(analogVal);
  
  //GAS
  sensorValue = analogRead(MQ2pin); // read analog input pin 0
  Serial.print("Valor detectado por el sensor: ");
  Serial.print(sensorValue);
  
  if(sensorValue >= 1500)
  {
   Serial.print(" | Se detectó humo!");
   message=" | Se detectó humo!";
   
   //BUZZER
   tone(pinBuzzer, 440);
   digitalWrite(pinBuzzer, HIGH);
   
   servo10.attach(22);
   servo10.write(90);
        delay(1000); // Wait for 2000 millisecond(s)
        servo10.write(180);
        
        delay(3000); // Wait for 2000 millisecond(s)*/
  
   
  }
  Serial.println("");
  delay(2000); // espera por 2 segundos para la siguiente lectura
  

  }  //delay(100000000000000);
  //}
  
  
 // if(desactivar==false){
   //   digitalWrite(pinBuzzer, LOW); 
  //}
 // else{
  //delay(100000000000000);
  //}
  
  //}

  // Read the analog interface
 
else{
  Serial.println("SISTEMA APAGADO");
  servo10.attach(22);
       servo10.write(90);
        Serial.println("PUERTA CERRADA");
           
  digitalWrite(pinBuzzer, LOW); 
  noTone(pinBuzzer);
  
  
}
 
 

}
